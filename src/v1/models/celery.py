from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.orm import relationship
from sqlalchemy import text

from src import db


class Celery(db.Model):
    """
    Model for celery task
    Attributes:
    'celery_id': Unique ID generated for each task_id(UUID) 
    'task_id': task id generated by celery(STRING(256))
    'status': celery task status(STRING(50))
    's3_url': S3 bucket url(STRING(512))
    """
    __tablename__ = 'celery'
    __permissions__ = dict(
        owner=['read', 'update', 'delete', 'revoke'],
        group=['read', 'update'],
        other=['read']
    )

    celery_id = db.Column(db.String(128), primary_key=True,
        server_default=text("uuid_generate_v4()"), nullable=False)
    task_id = db.Column(db.String(256), nullable=False)
    status = db.Column(db.String(50), nullable=False)
    s3_url = db.Column(db.String(512), nullable=False)

    # Constructor initializing values
    def __init__(self, task_id, status, s3_url):
        self.task_id = task_id
        self.status = status
        self.s3_url = s3_url

    # representation of the model. Can be edited to show whatever
    # attributes we want to see.
    def __repr__(self):
        return str({
            'task_id': str(self.task_id),
            'status':self.status,
            's3_url': self.s3_url
        })
