on:
  push:
    branches:
      - master
    paths:
      - 'src/**'
      - 'config/**'
      - 'migrations/**'
      - 'run.py'
      - 'uwsgi.ini'
      - 'Dockerfile'
      - '.github/workflows/**'
      - 'dev-requirements.txt'

jobs:
 build:
   runs-on: ubuntu-latest
   steps: 
     - name: Checkout master
       uses: actions/checkout@master
     - name: Install doctl
       uses: digitalocean/action-doctl@v2
       with:
         token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
     - name: Build container image
       run: docker build -t registry.digitalocean.com/meetingx/tw-api:api_latest .
     - name: Build celery worker container image
       run: docker build -t registry.digitalocean.com/meetingx/tw-api:celery_latest -f Dockerfile.celery .
     - name: Build celery beat container image
       run: docker build -t registry.digitalocean.com/meetingx/tw-api:beat_latest -f Dockerfile.beat .
     - name: Log in to DigitalOcean Container Registry with short-lived credentials
       run: doctl registry login --expiry-seconds 1200
     - name: Push image to DigitalOcean Container Registry
       run: docker push registry.digitalocean.com/meetingx/tw-api:api_latest
     - name: Push celery image to DigitalOcean Container Registry
       run: docker push registry.digitalocean.com/meetingx/tw-api:celery_latest
     - name: Push beat image to DigitalOcean Container Registry
       run: docker push registry.digitalocean.com/meetingx/tw-api:beat_latest
     - name: Update deployment file
       run: TAG=api_latest && sed -i 's|<IMAGE>|registry.digitalocean.com/meetingx/tw-api:'${TAG}'|' $GITHUB_WORKSPACE/config/deployment.yaml
     - name: Update deployment file
       run: TAG=celery_latest && sed -i 's|<IMAGE_CELERY_WORKER>|registry.digitalocean.com/meetingx/tw-api:'${TAG}'|' $GITHUB_WORKSPACE/config/deployment.yaml
     - name: Update deployment file
       run: TAG=beat_latest && sed -i 's|<IMAGE_CELERY_BEAT>|registry.digitalocean.com/meetingx/tw-api:'${TAG}'|' $GITHUB_WORKSPACE/config/deployment.yaml
     - name: Save DigitalOcean kubeconfig with short-lived credentials
       run: doctl kubernetes cluster kubeconfig save --expiry-seconds 3600 k8s-1-28-2-do-0-sgp1-1704968941741
     - name: Deploy to DigitalOcean Kubernetes
       run: kubectl apply -f $GITHUB_WORKSPACE/config/deployment.yaml
     - name: Verify deployment
       run: kubectl rollout status deployment/tw-api
     - name: Run garbage collection
       run: doctl registry garbage-collection start --force
