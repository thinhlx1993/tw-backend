"""Create user table

Revision ID: f13057818ae2
Revises: 
Create Date: 2020-05-28 21:07:03.438639

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy import func
from sqlalchemy.engine.reflection import Inspector
from sqlalchemy.dialects import postgresql
from sqlalchemy.schema import Sequence, CreateSequence

# revision identifiers, used by Alembic.
revision = "f13057818ae2"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    op.execute('CREATE EXTENSION IF NOT EXISTS "uuid-ossp";')
    # ### commands auto generated by Alembic - please adjust! ###
    # conn = op.get_bind()
    # inspector = Inspector.from_engine(conn)
    # tables = inspector.get_table_names()
    # if "user" not in tables:
    op.create_table(
        "users",
        sa.Column("user_id", sa.String(length=128), nullable=False, server_default=sa.text('uuid_generate_v4()')),
        sa.Column("username", sa.String(length=256), nullable=False),
        sa.Column("email", sa.String(length=256), nullable=True),
        sa.Column("password", sa.String(length=512), nullable=True),
        sa.Column("first_name", sa.String(length=128), nullable=True),
        sa.Column("last_name", sa.String(length=128), nullable=True),
        sa.Column("phone_number", sa.String(length=128), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "code_generated_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column(
            "is_disabled", sa.Boolean(), server_default="false", nullable=True
        ),
        sa.Column('mfa_enabled', sa.Boolean(), server_default='false', nullable=True),
        sa.Column('mfa_secret', postgresql.BYTEA(), nullable=True),
        sa.Column('is_email_verified', sa.Boolean(), nullable=False, server_default='false',
                  comment='flag for user email verification'),
        sa.PrimaryKeyConstraint("user_id"),
        sa.UniqueConstraint("username"),
    )
    # username admin password thinh
    op.execute("INSERT INTO public.users(user_id, username, email, password, first_name, last_name, phone_number, created_at, is_disabled) VALUES('bb34fc4d-8d63-4c38-b41d-71a314d7cb3a','admin','user@smartassistance.com','$2b$12$EPbMhx93Ia.SDoLPkX4KgucByJO/2RBbDO6kWOnwp3drRd16vcSBW','Super','Admin', '12345678','2023-12-10T15:13:23',False)")

    op.create_table(
        "roles",
        sa.Column("id", sa.String(length=128), nullable=False, server_default=sa.text('uuid_generate_v4()')),
        sa.Column("name", sa.String(length=128), nullable=True),
        sa.Column("description", sa.String(length=1024), nullable=True),
        sa.Column(
            "created_on", sa.DateTime(), server_default=sa.text("now()"), nullable=True
        ),
        sa.Column('is_deletable', sa.Boolean(), nullable=False, server_default='false'),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "groups",
        sa.Column("id", sa.String(length=128), nullable=False, server_default=sa.text('uuid_generate_v4()')),
        sa.Column("name", sa.String(length=32), nullable=True),
        sa.Column("description", sa.String(length=1024), nullable=True),
        sa.Column(
            "created_on", sa.DateTime(), server_default=sa.text("now()"), nullable=True
        ),
        sa.Column("is_deletable", sa.Boolean(), nullable=False, server_default='false'),
        sa.PrimaryKeyConstraint("id"),
    )
    op.execute(
        "INSERT INTO public.roles(id, name, description, created_on, is_deletable) VALUES('2a31ee55-2132-4755-b3ec-ca12f991c999' ,'super_admin', 'Super Admin', '2023-12-10T15:13:23', False)")
    op.execute(
        "INSERT INTO public.roles(id, name, description, created_on, is_deletable) VALUES('187fd4ad-4e79-419f-a0dd-b4344b473bf2' ,'admin', 'Admin', '2023-12-10T15:13:23', False)")
    op.execute(
        "INSERT INTO public.roles(id, name, description, created_on, is_deletable) VALUES('0c69b8ab-e118-467a-bada-63dd19a2cadd' ,'users', 'Users', '2023-12-10T15:13:23', False)")
    op.create_table(
        "user_group",
        sa.Column("id", sa.String(length=128), nullable=False, server_default=sa.text('uuid_generate_v4()')),
        sa.Column("user_id", sa.String(length=128), nullable=False),
        sa.Column("group_id", sa.String(length=128), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.user_id"],
        ),
        sa.ForeignKeyConstraint(
            ["group_id"],
            ["groups.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("user_id", "group_id", name="_user_group_uc")
    )
    op.execute(
        "INSERT INTO public.groups(id, name, description, created_on, is_deletable) VALUES('a78e75b3-b5ee-4755-9fe5-1178f5f72579' ,'administrator', 'Administrator', '2023-12-10T15:13:23', False)")
    op.create_table(
        "user_role",
        sa.Column("id", sa.String(length=128), nullable=False, server_default=sa.text('uuid_generate_v4()')),
        sa.Column("user_id", sa.String(length=128), nullable=False),
        sa.Column("role_id", sa.String(length=128), nullable=False),
        sa.ForeignKeyConstraint(
            ["role_id"],
            ["roles.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.user_id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("user_id", "role_id", name="_user_role_uc")
    )

    op.execute(
        "INSERT INTO public.user_role(id, user_id, role_id) VALUES('de5a4eb1-ff66-450e-bf6d-dc013e933ac4' ,'bb34fc4d-8d63-4c38-b41d-71a314d7cb3a', '2a31ee55-2132-4755-b3ec-ca12f991c999')")
    op.execute(
        "INSERT INTO public.user_group(id, user_id, group_id) VALUES('de5a4eb1-ff66-450e-bf6d-dc013e933ac4' ,'bb34fc4d-8d63-4c38-b41d-71a314d7cb3a', 'a78e75b3-b5ee-4755-9fe5-1178f5f72579')")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("user_role")
    op.drop_table("user_group")
    op.drop_table("groups")
    op.drop_table("roles")
    op.drop_table("users")
    # ### end Alembic commands ###
