"""Upgrade users table

Revision ID: f1e0f3d8d7c0
Revises: 92259e7a97ef
Create Date: 2023-12-11 20:07:07.369551

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'f1e0f3d8d7c0'
down_revision = '92259e7a97ef'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('auth_token_blacklist', 'user_id',
               existing_type=sa.VARCHAR(length=128),
               nullable=False,
               comment='User ID that generated the token')
    op.drop_index('ix_auth_token_blacklist_user_id', table_name='auth_token_blacklist')
    op.add_column('celery', sa.Column('s3_url', sa.String(length=512), nullable=False))
    op.alter_column('groups', 'name',
               existing_type=sa.VARCHAR(length=32),
               type_=sa.String(length=128),
               existing_nullable=True)
    op.alter_column('groups', 'is_deletable',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'))
    op.alter_column('roles', 'name',
               existing_type=sa.VARCHAR(length=128),
               type_=sa.String(length=32),
               existing_nullable=True)
    op.alter_column('roles', 'is_deletable',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'))
    op.alter_column('user_group', 'user_id',
               existing_type=sa.VARCHAR(length=128),
               nullable=True)
    op.alter_column('user_group', 'group_id',
               existing_type=sa.VARCHAR(length=128),
               nullable=True)
    op.drop_constraint('_user_group_uc', 'user_group', type_='unique')
    op.alter_column('user_password_reset_token', 'token_id',
               existing_type=sa.VARCHAR(length=128),
               comment='The primary key',
               existing_comment='primary key id',
               existing_nullable=False,
               existing_server_default=sa.text('uuid_generate_v4()'))
    op.alter_column('user_password_reset_token', 'token',
               existing_type=sa.VARCHAR(length=512),
               comment='The token data',
               existing_comment='base64 URL encoded token for password reset',
               existing_nullable=False)
    op.alter_column('user_role', 'user_id',
               existing_type=sa.VARCHAR(length=128),
               nullable=True)
    op.alter_column('user_role', 'role_id',
               existing_type=sa.VARCHAR(length=128),
               nullable=True)
    op.drop_constraint('_user_role_uc', 'user_role', type_='unique')
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'is_email_verified',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               comment=None,
               existing_comment='flag for user email verification',
               existing_server_default=sa.text('false'))
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('users', 'is_email_verified',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               comment='flag for user email verification',
               existing_server_default=sa.text('false'))
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.create_unique_constraint('_user_role_uc', 'user_role', ['user_id', 'role_id'])
    op.alter_column('user_role', 'role_id',
               existing_type=sa.VARCHAR(length=128),
               nullable=False)
    op.alter_column('user_role', 'user_id',
               existing_type=sa.VARCHAR(length=128),
               nullable=False)
    op.alter_column('user_password_reset_token', 'token',
               existing_type=sa.VARCHAR(length=512),
               comment='base64 URL encoded token for password reset',
               existing_comment='The token data',
               existing_nullable=False)
    op.alter_column('user_password_reset_token', 'token_id',
               existing_type=sa.VARCHAR(length=128),
               comment='primary key id',
               existing_comment='The primary key',
               existing_nullable=False,
               existing_server_default=sa.text('uuid_generate_v4()'))
    op.create_unique_constraint('_user_group_uc', 'user_group', ['user_id', 'group_id'])
    op.alter_column('user_group', 'group_id',
               existing_type=sa.VARCHAR(length=128),
               nullable=False)
    op.alter_column('user_group', 'user_id',
               existing_type=sa.VARCHAR(length=128),
               nullable=False)
    op.alter_column('roles', 'is_deletable',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'))
    op.alter_column('roles', 'name',
               existing_type=sa.String(length=32),
               type_=sa.VARCHAR(length=128),
               existing_nullable=True)
    op.alter_column('groups', 'is_deletable',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'))
    op.alter_column('groups', 'name',
               existing_type=sa.String(length=128),
               type_=sa.VARCHAR(length=32),
               existing_nullable=True)
    op.drop_column('celery', 's3_url')
    op.create_index('ix_auth_token_blacklist_user_id', 'auth_token_blacklist', ['user_id'], unique=False)
    op.alter_column('auth_token_blacklist', 'user_id',
               existing_type=sa.VARCHAR(length=128),
               nullable=True,
               comment=None,
               existing_comment='User ID that generated the token')
    # ### end Alembic commands ###
